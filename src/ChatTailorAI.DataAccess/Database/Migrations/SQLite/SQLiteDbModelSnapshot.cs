// <auto-generated />
using System;
using ChatTailorAI.DataAccess.Database.Providers.SQLite;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ChatTailorAI.DataAccess.Database.Migrations.SQLite
{
    [DbContext(typeof(SQLiteDb))]
    partial class SQLiteDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32");

            modelBuilder.Entity("ChatTailorAI.Shared.Models.Assistants.Assistant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AssistantType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalAssistantId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Instructions")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Model")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Assistants");
                });

            modelBuilder.Entity("ChatTailorAI.Shared.Models.Chat.ChatImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MessageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("PromptId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Size")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("PromptId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ChatTailorAI.Shared.Models.Chat.ChatMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConversationId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalMessageId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Messages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ChatMessage");
                });

            modelBuilder.Entity("ChatTailorAI.Shared.Models.Conversations.ArchivedConversation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssistantId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("AssistantType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConversationType")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Instructions")
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThreadId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ArchivedConversations");
                });

            modelBuilder.Entity("ChatTailorAI.Shared.Models.Conversations.Conversation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConversationType")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Instructions")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Model")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Conversations");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Standard");
                });

            modelBuilder.Entity("ChatTailorAI.Shared.Models.Prompts.Prompt", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PromptType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Prompts");
                });

            modelBuilder.Entity("ChatTailorAI.Shared.Models.Chat.ChatImageMessage", b =>
                {
                    b.HasBaseType("ChatTailorAI.Shared.Models.Chat.ChatMessage");

                    b.HasDiscriminator().HasValue("ChatImageMessage");
                });

            modelBuilder.Entity("ChatTailorAI.Shared.Models.Conversations.AssistantConversation", b =>
                {
                    b.HasBaseType("ChatTailorAI.Shared.Models.Conversations.Conversation");

                    b.Property<string>("AssistantId")
                        .HasColumnType("TEXT");

                    b.Property<int>("AssistantType")
                        .HasColumnType("INTEGER");

                    b.HasIndex("AssistantId");

                    b.HasDiscriminator().HasValue("Assistant");
                });

            modelBuilder.Entity("ChatTailorAI.Shared.Models.Conversations.OpenAI.OpenAIConversation", b =>
                {
                    b.HasBaseType("ChatTailorAI.Shared.Models.Conversations.Conversation");

                    b.HasDiscriminator().HasValue("OpenAI");
                });

            modelBuilder.Entity("ChatTailorAI.Shared.Models.Conversations.OpenAI.OpenAIAssistantConversation", b =>
                {
                    b.HasBaseType("ChatTailorAI.Shared.Models.Conversations.AssistantConversation");

                    b.Property<string>("ThreadId")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("OpenAIAssistant");
                });

            modelBuilder.Entity("ChatTailorAI.Shared.Models.Chat.ChatImage", b =>
                {
                    b.HasOne("ChatTailorAI.Shared.Models.Chat.ChatImageMessage", "ChatImageMessage")
                        .WithMany("Images")
                        .HasForeignKey("MessageId");

                    b.HasOne("ChatTailorAI.Shared.Models.Prompts.Prompt", "Prompt")
                        .WithMany()
                        .HasForeignKey("PromptId");
                });

            modelBuilder.Entity("ChatTailorAI.Shared.Models.Conversations.AssistantConversation", b =>
                {
                    b.HasOne("ChatTailorAI.Shared.Models.Assistants.Assistant", "Assistant")
                        .WithMany()
                        .HasForeignKey("AssistantId");
                });
#pragma warning restore 612, 618
        }
    }
}
